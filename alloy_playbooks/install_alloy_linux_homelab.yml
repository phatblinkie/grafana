---
- name: Install and configure Grafana Alloy
  hosts: all
  become: yes
  vars:
    alloy_rpm_url: "https://github.com/grafana/alloy/releases/download/v1.7.5/alloy-1.7.5-1.amd64.rpm"
    alloy_rpm_filename: "alloy-1.7.5-1.amd64.rpm"
    software_exporter_service_path: "/etc/systemd/system/software-exporter.service"
    software_exporter_service_content: |
      [Unit]
      Description=Linux Software Metrics Exporter
      After=network.target

      [Service]
      Type=oneshot
      User=root
      ExecStart=/usr/local/bin/export_installed_software.sh
    software_exporter_timer_path: "/etc/systemd/system/software-exporter.timer"
    software_exporter_timer_content: |
      [Unit]
      Description=Run software exporter hourly

      [Timer]
      OnCalendar=hourly
      Persistent=true

      [Install]
      WantedBy=timers.target
    export_installed_software_path: "/usr/local/bin/export_installed_software.sh"
    export_installed_software_content: |
      #!/bin/bash
      OUTPUT_DIR="/var/lib/node_exporter/textfile_collector"
      METRIC_FILE="${OUTPUT_DIR}/software_metrics.prom.tmp"
      FINAL_FILE="${OUTPUT_DIR}/software_metrics.prom"

      # Create directory if needed
      mkdir -p "$OUTPUT_DIR"

      # Function to escape Prometheus label values
      escape_label() {
        echo "$1" | sed \
          -e 's/\\/\\\\/g' \
          -e 's/"/\\"/g' \
          -e 's/^/"/' \
          -e 's/$/"/' \
          -e 's/\n/\\n/g' \
          -e 's/\r/\\r/g'
      }

      # Write the metric header
      echo '# HELP linux_software_info Installed software information
      # TYPE linux_software_info gauge' > "$METRIC_FILE"

      # For Debian/Ubuntu (dpkg)
      if command -v dpkg >/dev/null; then
        dpkg-query -W --showformat='${Package} ${Version} ${Architecture}\n' | while read pkg ver arch; do
          printf 'linux_software_info{name=%s,version=%s,arch=%s} 1\n' \
            "$(escape_label "$pkg")" \
            "$(escape_label "$ver")" \
            "$(escape_label "$arch")" >> "$METRIC_FILE"
        done
      fi

      # For RHEL/CentOS (rpm)
      if command -v rpm >/dev/null; then
        rpm -qa --queryformat '%{NAME} %{VERSION}-%{RELEASE} %{ARCH}\n' | while read pkg ver arch; do
          printf 'linux_software_info{name=%s,version=%s,arch=%s} 1\n' \
            "$(escape_label "$pkg")" \
            "$(escape_label "$ver")" \
            "$(escape_label "$arch")" >> "$METRIC_FILE"
        done
      fi

      # For Alpine (apk)
      if command -v apk >/dev/null; then
        apk info -v | while read pkg; do
          name=$(echo "$pkg" | sed 's/-[0-9].*$//')
          ver=$(echo "$pkg" | grep -o '[0-9].*$')
          printf 'linux_software_info{name=%s,version=%s,arch=""} 1\n' \
            "$(escape_label "$name")" \
            "$(escape_label "$ver")" >> "$METRIC_FILE"
        done
      fi

      # Atomically update the file
      mv -f "$METRIC_FILE" "$FINAL_FILE"


    alloy_config_content: |
      logging {
        level = "info"
      }

      prometheus.remote_write "mimir_host" {
        endpoint {
          url = "http://192.168.11.165:9009/api/v1/push"
        }
      }

      prometheus.exporter.unix "localhost" {
        enable_collectors = [
          "boottime",
          "cpu",
          "cpufreq",
          "diskstats",
          "edac",
          "filesystem",
          "hwmon",
          "loadavg",
          "logind",
          "meminfo",
          "netclass",
          "netdev",
          "netstat",
          "network_route",
          "os",
          "sockstat",
          "systemd",
          "textfile",
          "thermal_zone",
          "time",
          "uname",
        ]

        textfile {
          directory = "/var/lib/node_exporter/textfile_collector"
        }

      }

      discovery.relabel "linux_targets" {
        targets = prometheus.exporter.unix.localhost.targets
        
        rule {
          target_label = "ip_address"
          replacement = "{{ host_ip }}"
        }
        
        rule {
          target_label = "hostname"
          replacement = "{{ inventory_hostname }}"
        }
      }

      prometheus.scrape "unix_metrics" {
        targets    = discovery.relabel.linux_targets.output
        forward_to = [prometheus.remote_write.mimir_host.receiver]
      }

      loki.write "loki_host" {
        endpoint {
          url = "http://192.168.11.165:3100/loki/api/v1/push"
        }
      }

      loki.source.journal "journal_logs" {
        forward_to = [loki.write.loki_host.receiver]

        labels = {
          job  = "journal",
          host = env("HOSTNAME"),
          ip_address = "{{ host_ip }}",
        }
      }

  tasks:
    - name: Check if inventory_hostname is an IP address
      set_fact:
        is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
      delegate_to: localhost

    - name: Resolve IP address on control node if not already an IP address
      shell: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
      register: ip_lookup
      when: not is_ip_address
      delegate_to: localhost

    - name: Set IP address fact
      set_fact:
        host_ip: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
      delegate_to: localhost

    - name: fetch file into EE
      ansible.builtin.get_url:
        url: "{{ alloy_rpm_url }}"
        dest: "/tmp/alloy-1.7.5-1.amd64.rpm"
        mode: '0644'
      delegate_to: localhost

    - name: copy file to remote host
      ansible.builtin.copy:
        src: "/tmp/alloy-1.7.5-1.amd64.rpm"
        dest: "/tmp/alloy-1.7.5-1.amd64.rpm"
        mode: 0644

    - name: Install Grafana Alloy RPM
      ansible.builtin.yum:
        name: "/tmp/alloy-1.7.5-1.amd64.rpm"
        state: present
        disable_gpg_check: true

    - name: Ensure Alloy configuration directory exists
      ansible.builtin.stat:
        path: /etc/alloy
      register: alloy_dir

    - name: Create config file with specified content
      ansible.builtin.copy:
        dest: /etc/alloy/config.alloy
        content: "{{ alloy_config_content }}"
        owner: root
        group: root
        mode: '0644'

    - name: Install software exporter service file
      ansible.builtin.copy:
        dest: "{{ software_exporter_service_path }}"
        content: "{{ software_exporter_service_content }}"
        owner: root
        group: root
        mode: '0644'

    - name: Install software exporter timer file
      ansible.builtin.copy:
        dest: "{{ software_exporter_timer_path }}"
        content: "{{ software_exporter_timer_content }}"
        owner: root
        group: root
        mode: '0644'

    - name: Install software exporter bash script
      ansible.builtin.copy:
        dest: "{{ export_installed_software_path }}"
        content: "{{ export_installed_software_content }}"
        owner: root
        group: root
        mode: '0755'

    - name: Force systemd to reread configs
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Enable and restart service software-exporter and ensure it is not masked
      ansible.builtin.systemd_service:
        name: software-exporter
        enabled: true
        masked: no
        state: restarted

    - name: Start and enable Alloy service
      ansible.builtin.service:
        name: alloy
        state: restarted
        enabled: yes

    - name: Clean up RPM file
      ansible.builtin.file:
        path: "/tmp/alloy-1.7.5-1.amd64.rpm"
        state: absent
