---
  - name: Install and configure Grafana Alloy on Windows
    hosts: all
    gather_facts: yes
    vars:
      alloy_version: "1.7.5"
      alloy_installer_url: "http://164.225.186.87/rpms/alloy-installer-windows-amd64.exe.zip"
      alloy_install_dir: "C:\\Program Files\\GrafanaLabs\\Alloy"
      alloy_config_path: "C:\\Program Files\\GrafanaLabs\\Alloy\\config.alloy"
      alloy_service_name: "alloy"
      alloy_config_content: |
        logging {
          level = "info"
        }

        prometheus.remote_write "mimir_host" {
          endpoint {
            url = "http://164.225.186.87:9009/api/v1/push"
          }
        }

        prometheus.exporter.windows "localhost" {
          enabled_collectors = [
            "cpu",
            "cs",
            "logical_disk",
            "net",
            "os",
            "service",
            "system",
            "textfile",
            "logon",
            "memory",
            "thermalzone",
            "textfile",
          ]
        }

        discovery.relabel "windows_targets" {
          targets = prometheus.exporter.windows.localhost.targets

          rule {
            target_label = "ip_address"
            replacement = "{{ host_ip }}"
          }

          rule {
            target_label = "hostname"
            replacement = "{{ inventory_hostname }}"
          }
        }

        prometheus.scrape "windows_metrics" {
          targets    = discovery.relabel.windows_targets.output
          forward_to = [prometheus.remote_write.mimir_host.receiver]
        }

        loki.write "remote_loki" {
          endpoint {
            url = "http://164.225.186.87:3100/loki/api/v1/push"
          }
        }

        loki.relabel "windows_mapping" {
          forward_to = [loki.write.remote_loki.receiver]
          rule {
            source_labels = ["computer"]
            target_label  = "agent_hostname"
          }
          rule {
            target_label = "ip_address"
            replacement = "{{ host_ip }}"
          }
          rule {
            target_label = "hostname"
            replacement = "{{ inventory_hostname }}"
          }
        }

        loki.process "parse_eventlog" {
          forward_to = [
            loki.relabel.windows_mapping.receiver,
          ]

          stage.json {
            expressions = {
              "source"  = "source",
            }
          }

          stage.labels {
            values = {
              "source"  = "source",
            }
          }
        }

        loki.source.windowsevent "system" {
          forward_to = [
            loki.process.parse_eventlog.receiver,
          ]
          labels = {
            job = "windows_events",
            host = "{{ inventory_hostname }}",
            ip_address = "{{ host_ip }}",
          }
          eventlog_name = "System"
        }

        loki.source.windowsevent "application" {
          forward_to = [
            loki.process.parse_eventlog.receiver,
          ]
          labels = {
            job = "windows_events",
            host = "{{ inventory_hostname }}",
            ip_address = "{{ host_ip }}",
          }
          eventlog_name = "Application"
        }

    tasks:
      - name: Check if inventory_hostname is an IP address
        set_fact:
          is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
        delegate_to: localhost

      - name: Resolve IP address on control node if not already an IP address
        shell: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
        register: ip_lookup
        when: not is_ip_address
        delegate_to: localhost

      - name: Set IP address fact
        set_fact:
          host_ip: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
        delegate_to: localhost

      - name: Check if Alloy is already installed
        win_stat:
          path: "{{ alloy_install_dir }}\\alloy.exe"
        register: alloy_installed

      - name: fetch installer file into EE
        ansible.builtin.get_url:
          url: "{{ alloy_installer_url }}"
          dest: "/tmp/alloy-installer-{{ alloy_version }}.zip"
        delegate_to: localhost
        when: not alloy_installed.stat.exists

      - name: copy installer file to remote host
        ansible.windows.win_copy:
          src: "/tmp/alloy-installer-{{ alloy_version }}.zip"
          dest: "C:\\Windows\\Temp\\alloy-installer-{{ alloy_version }}.zip"
        when: not alloy_installed.stat.exists

      - name: Extract installer
        win_unzip:
          src: "C:\\Windows\\Temp\\alloy-installer-{{ alloy_version }}.zip"
          dest: "C:\\Windows\\Temp"
          creates: "C:\\Windows\\Temp\\alloy-installer-windows-amd64.exe"
        when: not alloy_installed.stat.exists

      - name: Install Alloy silently to correct path
        win_command: "C:\\Windows\\Temp\\alloy-installer-windows-amd64.exe /S"
        args:
          creates: "{{ alloy_install_dir }}\\alloy.exe"
        when: not alloy_installed.stat.exists

      - name: Create config file
        win_copy:
          dest: "{{ alloy_config_path }}"
          content: "{{ alloy_config_content }}"
          force: yes

      - name: Ensure Alloy service is running
        win_service:
          name: "{{ alloy_service_name }}"
          state: restarted
          start_mode: auto

      - name: Clean up installer files
        block:
          - name: Remove installer zip
            win_file:
              path: "C:\\Windows\\Temp\\alloy-installer-{{ alloy_version }}.zip"
              state: absent

          - name: Remove extracted installer
            win_file:
              path: "C:\\Windows\\Temp\\alloy-installer-windows-amd64.exe"
              state: absent
        when: not alloy_installed.stat.exists
